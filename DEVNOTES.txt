CodeCollector Development Notes

*** Frontend Stack ***
HTML
CSS
JavaScript
React (Router, Redux, Framer Motion)
Axios

*** Backend Stack ***
Express/Node
PostgresSql (RDBMS)
Sequelize (ORM)
JWT (Auth)
Bcrypt (Auth)
Config (secrets and env management)

*** Tools ***
Jest 
React Testing Library (Frontend Tests)
Cypress (e2e testing)
Render (Deployment Service)
Github Actions (CI/CD pipeline)


DB Relations

---Tables---
USERS
HUBS 
POSTS
SNIPPETS

HUBS have many POSTS
USERS have many POSTS
USERS have many SNIPPETS
POSTS have one SNIPPETS

users
| id  | username | name | password |
| --- | -------- | ---- | -------- |

hubs
| id  | name | subscribers | adminHub |
| --- | ---- | --------- | -------- |


posts
| id  | title | author | content | hubId | userId |
| --- | ----- | ------ | ------- | ----- | ------ |

snippets
| id  | title | content | userId |
| --- | ----- | ------- | ------ |


--Versioning (semantic): v0.0.0 (major.minor.patch)--
Versioning will start with v0.0.0. v1.0.0 will represent our 
deployed application with minimal yet fully functional features.

Version Jumps will be implemented through our simple Deployment
pipeline that will be created early in development. Our pipeline
will only update versions upon an approved merge of a pull request
to the main branch. A condition will be implemented within the 
pipeline so that version jump wont apply if the #skip tag is
in our commit message. By default version bumps increment the patch
value. 


[DEVELOPMENT STEPS (WILL ADD TO AND CHANGE MOVING FORWARD)]

1. INITIALIZE PROJECT STRUCTURE

    --root directory will serve as our backend while our client folder
    will serve as our frontend. 
    
    --github actions folders/files will be created early on as well in 
    order to implement the foundations of our development pipeline.
        -only for tagging releases in the beginning

    --our routes are handled in 4 controllers (hubs, posts, snippets, users)

    --Database must be connected conditionally depending on the NODE_ENV
    value (for either development/production vs testing)

2. ROUTES
    Routes, their api endpoints, and their functionality:

    Users: 
        GET - /api/users - to grab all users [DONE]
        POST - /api/users - to create new user [DONE]
        DELETE - /api/users - to delete a user [---] 

    Login:
        POST - /api/login - to authenticate user and assign priviledges
                through jwt [DONE]

    Hubs:
        GET - /api/hubs - to grab all hubs [DONE]
        POST - /api/hubs - to create a new hub [---] 
        PATCH - /api/hubs/:id - to update existing hub (subscriber increase) [DONE]

    Posts (Belongs To Users):
        GET - /api/posts - to grab all posts [---]
        POST - /api/posts - to create a new post [---]
        PUT - /api/posts - to update a post [---]
        DELETE = /api/posts - to delete a post [---]

    Snippets (Belongs To Users & Posts):
        GET - /api/snippets/:userId - to grab all user snippets [---]
        POST - /api/snippets/:userId - to create a user snippet [---]
        PUT - /api/snippets/:userId/:id - to edit a user snippet [---]
        DELETE - /api/snippets/:userId/:id - to delete a user snippet [---]


3. TESTING ROUTES - CONDITIONS TO CHECK FOR
    
    Users: 
        -checking if users can be added [DONE]
        -error if password or username is too short [DONE]
        -error if no password or username is provided [---]
        -deleting user successfully if authenticated as that user [---]

    Hubs: 
        -checking if hub is created [---]
        
    

    



    
