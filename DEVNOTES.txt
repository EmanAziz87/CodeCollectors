CodeCollector Development Notes

*** Frontend Stack ***
HTML
CSS
JavaScript
React (Router, Redux, Framer Motion)
Axios

*** Backend Stack ***
Express/Node
PostgresSql (RDBMS)
Sequelize (ORM)
JWT (Auth)
Bcrypt (Auth)
Config (secrets and env management)

*** Tools ***
Jest 
React Testing Library (Frontend Tests)
Cypress (e2e testing)
Render (Deployment Service)
Github Actions (CI/CD pipeline)


DB Relations

---Tables---
USERS
HUBS 
POSTS
SNIPPETS
COMMENTS

HUBS have many POSTS
USERS have many POSTS
USERS have many SNIPPETS
POSTS have one SNIPPETS

users
| id  | username | name | password | subscribedHubs |
| --- | -------- | ---- | -------- | -------------- |

hubs
| id  | name | subscribers | adminHub |
| --- | ---- | ----------- | -------- |

posts [---] [change content to description]
| id  | title | author | content | hubId | userId | snippetId |
| --- | ----- | ------ | ------- | ----- | ------ | --------- |

snippets [---] [add new column: description]
| id  | title| code | userId | 
| --- | ---- | ---- | ------ |

comments 
| id  | author |    content    | hierarchyLevel | parentId |
| --- | ------ | ------------- | -------------- | -------- |
| 1   | tim    | this is great |        1       |          |
| 2   | jim    | a comment     |        2       |    1     |
| 3   | eman   |    2how??     |        3       |    2     |
| 4   | person | this is great |        1       |          |
| 5   | dude   |    too slow   |        2       |    4     |

--Versioning (semantic): v0.0.0 (major.minor.patch)--
Versioning will start with v0.0.0. v1.0.0 will represent our 
deployed application with minimal yet fully functional features.

Version Jumps will be implemented through our simple Deployment
pipeline that will be created early in development. Our pipeline
will only update versions upon an approved merge of a pull request
to the main branch. A condition will be implemented within the 
pipeline so that version jump wont apply if the #skip tag is
in our commit message. By default version bumps increment the patch
value. 


[DEVELOPMENT STEPS (WILL ADD TO AND CHANGE MOVING FORWARD)]

1. INITIALIZE PROJECT STRUCTURE

    --root directory will serve as our backend while our client folder
    will serve as our frontend. 
    
    --github actions folders/files will be created early on as well in 
    order to implement the foundations of our development pipeline.
        -only for tagging releases in the beginning

    --our routes are handled in 4 controllers (hubs, posts, snippets, users)

    --Database must be connected conditionally depending on the NODE_ENV
    value (for either development/production vs testing)

2. ROUTES
    Routes, their api endpoints, and their functionality:

    Users: 
        GET - /api/users - to grab all users [DONE]
        POST - /api/users - to create new user [DONE]
        DELETE - /api/users - to delete a user [---] 

    Login:
        POST - /api/login - to authenticate user and assign priviledges
                through jwt [DONE]

    Hubs:
        GET - /api/hubs - to grab all hubs [DONE]
        POST - /api/hubs - to create a new hub [---] 
        PATCH - /api/hubs/:id - to update existing hub (subscriber increase) [DONE]

    Posts (Belongs To Users):
        GET - /api/posts - to grab all posts [DONE]
        GET - /api/posts/:id - to grab a specific post [DONE]
        POST - /api/posts - to create a new post [DONE]
        PATCH - /api/posts/:id - to update content of post [DONE]
        DELETE - /api/posts/:id - to delete a post [DONE]

    Snippets (Belongs To Users & Posts):
        GET - /api/snippets/ - to grab all snippets [DONE]
        POST - /api/snippets/ - to create a snippet [DONE]
        PUT - /api/snippets/:id - to edit a snippet content [DONE]
        DELETE - /api/snippets/:userId/:id - to delete a user snippet [DONE]


3. TESTING ROUTES - CONDITIONS TO CHECK FOR
    
    Users: 
        getting users
            - getting all users [---]
            - getting a specific user [---]
        adding users
            -checking if users can be added [DONE]
            -error if password or username is too short [DONE]
            -error if no password or username is provided [---]
            -deleting user successfully if authenticated as that user [---]

    Posts:
        getting posts
            - getting all posts [DONE]
            - getting specific post [DONE]
        adding posts 
            - when logged in you can add posts [DONE]
            - error when your not logged in and add post [DONE]
            - error when you create post with invalid submission info [DONE]
        updating posts
            - when logged in you can update a post thats yours [DONE]
            - error when your not logged in and try to update post [DONE]
            - error when logged in but update submission input is empty [DONE]
            - error when you try to update someone elses post [DONE]
        deleteing post
            - when logged in you can delete your own posts [DONE]
            - error when you try to delete a post when not logged in [DONE]
            - error when you try to delete someone elses post when logged in [DONE]

    Hubs: 
        getting hubs
            - gets all hubs [DONE]
            - get a specific hub [DONE]
        updating Hubs
            - when logged in, can subscribe to a hub [DONE]
            - error when not logged in and subscribe to a hub [DONE]
            - error when subscribing to the same sub twice [DONE]
    
    Snippets:
        getting snippets
            - get all snippets [DONE]
        creating snippets
            - when logged in create snippet [DONE]
            - error when creating empty snippet [DONE]
            - error when creating snippet and not logged in [DONE]
        updating snippets   
            - when logged in can update snippet [DONE]
            - error updating snippet when not logged in [DONE]
            - error updating snippet with not content [DONE]
            - error updating snippet that is not yours [DONE]
        deleting snippets
            - when logged in can delete snippet [DONE]
            - error deleting snippet when not logged in [DONE]
            - error deleting snippet that is not yours [DONE]
    
    Login:
        - logging in with valid credentials and receive valid token [DONE]

4. FRONTEND COMPONENTS 

    Navigation
        - link to login form [DONE] 
        - link to register form [DONE] 
        - link to user profile [DONE]
        - display whos logged in after log in [DONE]
        - logout button if logged in [DONE]
    Login Form
        - login form hidden when logged in [DONE]
    Register Form
        - register form nested within login form [DONE]
    Hub Component
        - link to hubs [DONE]
        - display all hubs [DONE]
        - subscribe button [DONE]
        - display links to each hub [DONE]
        - unsubscribe button [DONE]
    Posts Component
        - link to posts [DONE]
        - display posts in appropriate hub component [DONE]
        - create posts [DONE]
        - post form is in the hub component [DONE]
        - post form submits a snippet and a post and associates them [DONE]
        - post form can be toggled on and off [DONE]
        - on post submit, hide post form [---]
        - got to specific post [---]
        - create comments for post [---]
        - delete comments for post [---]
        - like comments for post [---]
        - reply to a comment through @username [---]
        - delete post [---]
    User Component
        - display subscribed hubs [DONE]
        - display snippets [DONE]
        - display posts [---]
        - display parent hub for a post [---]
        - delete post [---]
        - delete snippet [---]
        - link to snippets form [DONE]
        - delete account warning: confirm [---]
    Snippets Form
        - create snippet [DONE]
        

        
                
    

    



    
